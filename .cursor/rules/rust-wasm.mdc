---
description: Rust WebAssembly Integration Best Practices
globs: *.rs
alwaysApply: false
---
This rule enforces best practices for WebAssembly development in Rust.

## Rule Details

- **Pattern**: `*.rs`
- **Severity**: Warning
- **Category**: WebAssembly Integration

## Checks

1. **WASM Setup**
   - Use `wasm-bindgen` for JavaScript interop
   - Configure proper target features
   - Implement memory management strategies
   - Use appropriate build settings

2. **JavaScript Interop**
   - Use proper type conversions
   - Handle JavaScript promises correctly
   - Implement proper error handling
   - Use appropriate attribute macros

3. **Performance Optimization**
   - Minimize copying between JavaScript and Rust
   - Use appropriate data structures
   - Implement efficient memory management
   - Optimize for size when needed

4. **Browser Integration**
   - Handle DOM events properly
   - Implement proper lifecycle management
   - Use Web APIs correctly
   - Handle browser-specific features

## Examples

### Good
```rust
use wasm_bindgen::prelude::*;

#[wasm_bindgen]
pub struct GameState {
    players: Vec<Player>,
}

#[wasm_bindgen]
impl GameState {
    #[wasm_bindgen(constructor)]
    pub fn new() -> Self {
        console_error_panic_hook::set_once();
        Self {
            players: Vec::new(),
        }
    }

    pub fn update(&mut self) -> Result<(), JsValue> {
        // Efficient update logic
        Ok(())
    }
}

// Proper async handling
#[wasm_bindgen]
pub async fn fetch_data() -> Result<JsValue, JsValue> {
    let window = web_sys::window().unwrap();
    let response = JsFuture::from(
        window
            .fetch_with_str("/api/data")
    ).await?;
    
    // Convert response to Rust types
    Ok(response)
}
```

### Bad
```rust
// Bad: Inefficient data copying
#[wasm_bindgen]
pub fn process_data(data: Vec<u8>) -> Vec<u8> {
    // Unnecessary copying between JS and Rust
    data.clone()
}

// Bad: Not handling JavaScript errors
#[wasm_bindgen]
pub fn unsafe_operation() {
    // Missing error handling
    let window = web_sys::window().unwrap();
}
```

## Rationale

Proper WebAssembly integration ensures:
- Efficient JavaScript interop
- Good performance
- Proper error handling
- Browser compatibility

## References

- [wasm-bindgen Guide](mdc:https:/rustwasm.github.io/docs/wasm-bindgen)
- [Rust and WebAssembly Book](mdc:https:/rustwasm.github.io/docs/book)
- [wasm-pack Documentation](mdc:https:/rustwasm.github.io/docs/wasm-pack)